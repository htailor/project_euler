/******************************************************************************************

	Problem 2 - Even Fibonacci numbers
	
	Each new term in the Fibonacci sequence is generated by adding the previous two
	terms. By starting with 1 and 2, the first 10 terms will be:

		1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

	By considering the terms in the Fibonacci sequence whose values do not exceed four
	million, find the sum of the even-valued terms.

*******************************************************************************************/

#include <iostream>
#include <vector>

int problem2(const int &x){

	int sum = 2;
	
	int value = 0;
	std::vector<int> fibonacci;
	fibonacci.push_back(1);		// idx = 0
	fibonacci.push_back(2);		// idx = 1
	int idx = 2;
	
	while(value < x){
	
		value = fibonacci[idx-2]+fibonacci[idx-1];
		fibonacci.push_back(value);
		idx++;
		
		if(value % 2 ==0){
			sum = sum + value;
		}
		
	}
	
	return sum;
}


int test(const int &x){

	int a = 1;
	int b = 2;

	int sum = b;

	while(a < x && b < x){

		a = a + b;
		b = b + a;

		if(a % 2 == 0){
			sum = sum + a;
		}

		if(b % 2 == 0){
			sum = sum + b;
		}
	}

	return sum;
}




int main(int argc, char* argv[]){

	std::cout << "Even Fibonacci numbers" << std::endl;
	std::cout << "======================" << std::endl;
	
	int upper_bound = 4000000;
	std::cout << "Answer: " << problem2(upper_bound) << std::endl;
	std::cout << "Answer: " << test(upper_bound) << std::endl;
	return 0;
}
